import { GoogleGenerativeAI } from "@google/generative-ai";
import pdfParse from "pdf-parse";
import fetch from "node-fetch";
import fs from "fs";
import path from "path";
import { PdfConverter } from "pdf-poppler";
import Tesseract from "tesseract.js";

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

// Chuy·ªÉn PDF th√†nh ·∫£nh PNG
async function convertPdfToImages(pdfBuffer, outputDir) {
  const tempPdfPath = path.join(outputDir, 'temp.pdf');
  fs.writeFileSync(tempPdfPath, pdfBuffer);

  const converter = new PdfConverter(tempPdfPath);
  await converter.convert({ format: 'png', out_dir: outputDir });

  const files = fs.readdirSync(outputDir)
    .filter((file) => file.endsWith('.png'))
    .sort();

  return files.map((file) => path.join(outputDir, file));
}

// OCR t·ª´ ·∫£nh
async function ocrImages(imagePaths) {
  let fullText = "";

  for (const imagePath of imagePaths) {
    const { data: { text } } = await Tesseract.recognize(imagePath, "eng");
    fullText += text + "\n";
  }

  return fullText;
}

export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).json({ message: "Method not allowed" });

  const { cvUrl } = req.body;
  if (!cvUrl) return res.status(400).json({ success: false, error: "Thi·∫øu cvUrl" });

  try {
    // B1: T·∫£i file PDF t·ª´ Supabase
    const response = await fetch(cvUrl);
    const buffer = await response.buffer();

    // B2: Parse PDF
    let cvText = "";
    try {
      const data = await pdfParse(buffer);
      cvText = data.text;
    } catch {
      console.warn("‚ùå pdf-parse th·∫•t b·∫°i, chuy·ªÉn sang OCR");
    }

    // N·∫øu parse th·∫•t b·∫°i ho·∫∑c text qu√° ng·∫Øn ‚Üí OCR
    if (!cvText || cvText.trim().length < 30) {
      const tempDir = path.join(process.cwd(), "tmp");
      fs.mkdirSync(tempDir, { recursive: true });

      const imagePaths = await convertPdfToImages(buffer, tempDir);
      cvText = await ocrImages(imagePaths);

      // Xo√° file t·∫°m
      imagePaths.forEach((img) => fs.unlinkSync(img));
      fs.unlinkSync(path.join(tempDir, "temp.pdf"));
    }

    if (!cvText || cvText.trim().length < 30) {
      return res.status(400).json({
        success: false,
        error: "CV kh√¥ng ch·ª©a n·ªôi dung c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c. Vui l√≤ng th·ª≠ file kh√°c.",
      });
    }

    // B3: G·ª≠i prompt ƒë·∫øn Gemini
    const prompt = `
B·∫°n l√† chuy√™n gia tuy·ªÉn d·ª•ng ng√†nh CNTT. H√£y ch·∫•m ƒëi·ªÉm CV b√™n d∆∞·ªõi d·ª±a tr√™n c√°c ti√™u ch√≠:
1. C·∫•u tr√∫c & tr√¨nh b√†y
2. H·ªçc v·∫•n, li√™n h·ªá
3. K·ªπ nƒÉng, kinh nghi·ªám
4. M·ª©c ƒë·ªô chuy√™n nghi·ªáp
5. ƒêi·ªÉm n·ªïi b·∫≠t

N·ªôi dung CV:
"""
${cvText}
"""

Tr·∫£ v·ªÅ duy nh·∫•t m·ªôt JSON object:

{
  "score": 1-10,
  "feedback": "nh·∫≠n x√©t t·ªïng th·ªÉ",
  "suggestions": ["...", "..."],
  "highlights": ["...", "..."]
}
`;

    const result = await model.generateContent(prompt);
    const text = result.response.text();

    const match = text.match(/```(?:json)?([\s\S]*?)```/);
    const jsonText = match ? match[1].trim() : text.trim();
    const parsed = JSON.parse(jsonText);

    return res.status(200).json({ success: true, ...parsed });
  } catch (err) {
    console.error("üî• L·ªói evaluate-cv:", err);
    return res.status(500).json({
      success: false,
      error: err.message || "L·ªói server khi ch·∫•m ƒëi·ªÉm CV",
    });
  }
}